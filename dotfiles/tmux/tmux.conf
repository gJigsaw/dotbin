################################################################
# Tmux PlugIn Manager
################################################################
# List of plugins
# Supports `github_username/repo` or full git repo URLs
set -g @tpm_plugins '           \
  tmux-plugins/tpm              \
  tmux-plugins/tmux-sensible    \
  tmux-plugins/tmux-resurrect   \
'
# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'

################################################################
# ACTION KEY
################################################################
# Define New Key
set -g prefix C-q
# Remove Default Key
unbind C-b
# Pass Defined Key
bind C-q send-prefix

################################################################
# PANES
################################################################
# Split
unbind %
bind | split-window -h
bind - split-window -v
# Switch (using Emacs-Like keys)
bind C-a select-pane -L
bind C-e select-pane -R
bind C-n select-pane -D
bind C-p select-pane -U
# Resize
bind left resize-pane -L 3
bind right resize-pane -R 3
bind down resize-pane -D 3
bind up resize-pane -U 3
# Kill
bind-key x confirm-before -p "kill-pane #W? (y/n)" kill-pane
# Promote
# (default) "<prefix> !" promotes current pane to its own window
# Join (to an existing window)
bind-key @ command-prompt -p "create pane from:"  "join-pane -s ':%%'"

################################################################
# WINDOWS
################################################################
# Shrink (only when seen by another w/ smaller screen)
# default behaviour shrinks whenever attached - even when unseen
setw -g aggressive-resize on
# Kill
bind-key X confirm-before -p "kill-window #W? (y/n)" kill-window

################################################################
# STATUS BAR
################################################################
# Notifications
setw -g monitor-activity on
setw -g visual-activity on
# Show messages and notifications for 1/2 second.
set-option -g display-time 500
# Automatically Rename Windows
set -g automatic-rename on
# Attempt to allow mouse scrolling - appears to have failed.
set -g mode-mouse on
set-option -g mouse-select-pane on
set-window-option -g mode-mouse on
# Number Windows from 1 (instead of default of 0)
set -g base-index 1
# Color
set-window-option -g window-status-current-fg white
set-window-option -g window-status-current-bg blue
set-window-option -g window-status-fg black
set-window-option -g window-status-bg cyan
set-window-option -g window-status-attr dim
set-option -g status-bg magenta
#set-window-option -g window-status-current-attr bright

# unused (presently)
#set-option -g status-left 'Battery: #(/usr/local/bin/power.sh)   #[default] Windows:'

################################################################
# MISCELLANOUS
################################################################
# Reload Config File (to get changes without restarting tmux)
bind-key r source-file ~/.tmux.conf
# Set buffer limit to 100,000 (from default of 20,000)
set -g history-limit 100000

################################################################
# Advanced Commands
################################################################
# SSH in a new Window
bind-key S command-prompt -p ssh: "new-window -n %1 'ssh %1'"

#set -g mode-mouse on


################################################################
# Powerline Commands
################################################################
#source /usr/local/lib/python2.7/site-packages/powerline/bindings/tmux/powerline.conf

#if-shell 'test -z "$POWERLINE_CONFIG_COMMAND"' 'set-environment -g POWERLINE_CONFIG_COMMAND powerline-config'

# Don’t version-check for this core functionality -- anything too old to
# support these options likely won’t work well with powerline
#set -g status on
#set -g status-utf8 on
#set -g status-interval 2
#set -g status-left-length 20
#set -g status-right '#(eval $POWERLINE_COMMAND tmux right -R pane_id=`tmux display -p "#D"`)'
#set -g status-right-length 150
#set -g window-status-format "#[fg=colour244,bg=colour234]  #I #[fg=colour240] #[default]#W "
#set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"

# Legacy status-left definition to be overwritten for tmux Versions 1.8+
#set -g status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=colour234,nobold]#(eval $POWERLINE_COMMAND tmux left)'

# Simplify tmux version checking by using multiple config files. Source these
# config files based on the version in which tmux features were added and/or
# deprecated. By splitting these configuration options into separate files,
#run-shell 'eval $POWERLINE_CONFIG_COMMAND tmux source'
# vim: ft=tmux






# Setup Sessions(s)
################################################################

#To start a session with split windows (multiple panes), include the splitw command below the neww you would like to split; thus:

#new  -s SessionName -n WindowName Command
#neww -n foo/bar foo
#splitw -v -p 50 -t 0 bar
#selectw -t 1
#selectp -t 0
#would open 2 windows, the second of which would be named foo/bar and would be split vertically in half (50%) with foo running above bar. Focus would be in window 2 (foo/bar), top pane (foo).
#Note: Numbering for sessions, windows and panes starts at zero, unless you have specified a base-index of 1 in your .conf

#To manage multiple sessions, source separate session files from your conf file:

# initialize sessions
#bind F source-file ~/.tmux/foo
#bind B source-file ~/.tmux/bar















































################################################################
# A SUBSET OF OTHER COMMANDS I DO NOT CURRENTLY USE
################################################################

#!/bin/sh
#tmux new-session -d -s hostname

#tmux new-window -t hostname:1 -n 'Server1' 'ssh user@10.x.x.x'
#tmux new-window -t hostname:2 -n 'Server2' 'ssh user@10.x.x.x'
#tmux new-window -t hostname:3 -n 'Server3' 'ssh user@10.x.x.x'
#tmux new-window -t hostname:4 -n 'Server4' 'ssh user@10.x.x.x'
#tmux new-window -t hostname:5 -n 'Server5' 'ssh user@10.x.x.x'

#tmux select-window -t hawkhost:1
#tmux -2 attach-session -t hawkhost



#set-window-option -g mode-keys emacs
#set-option -g status-keys emacs

#set-window-option -g utf8 on

#set-option -g bell-action none
#set-option -g default-terminal "screen-256color"

#bind-key k kill-pane

# Keys to switch session.
#bind-key q switchc -t0
#bind-key w switchc -t1
#bind-key e switchc -t2

#This snippet does the same thing, but also checks tmux is installed before trying to launch it. It also tries to reattach you to an existing tmux session at logout, so that you can shut down every tmux session quickly from the same terminal at logout.

# # TMUX
# if which tmux 2>&1 >/dev/null; then
#     # if no session is started, start a new session
#     if test -z ${TMUX}; then
#         tmux
#     fi
#     # when quitting tmux, try to attach
#     while test -z ${TMUX}; do
#         tmux attach || break
#     done
# fi

#To start a session with split windows (multiple panes), include the splitw command below the neww you would like to split; thus:

#new  -s SessionName -n WindowName Command
#neww -n foo/bar foo
#splitw -v -p 50 -t 0 bar
#selectw -t 1
#selectp -t 0
#would open 2 windows, the second of which would be named foo/bar and would be split vertically in half (50%) with foo running above bar. Focus would be in window 2 (foo/bar), top pane (foo).
#Note: Numbering for sessions, windows and panes starts at zero, unless you have specified a base-index of 1 in your .conf

#To manage multiple sessions, source separate session files from your conf file:

# initialize sessions
#bind F source-file ~/.tmux/foo
#bind B source-file ~/.tmux/bar

#bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; run-shell "$TERMINAL -e 'cat /tmp/tmux-buffer | urlview'"

#bind-key y setw force-width 81
#bind-key u setw force-width 0

#bind-key D detach \; lock
#bind-key N neww \; splitw -d

# Refresh the status bar every 1 second.
#set-option -g status-interval 1000

# default statusbar colors
#set-option -g status-fg white
#set-option -g status-attr default

# active window title colors
#set-window-option -g window-status-current-fg white
#set-window-option -g window-status-current-bg default

# command/message line colors
#set-option -g message-fg white
#set-option -g message-bg black
#set-option -g message-attr bright
